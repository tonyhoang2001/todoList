-------------- Authentication --------------

- JwtTokenUtil:

	+ create secret key (put in application.properties file), expire duration (24h)

	+ create 3 methods:
		----- String generateAccessToken(User user)
		----- boolean validateAccessToken(String token) -> parse token and catch exception
		----- String getSubject(String token) -> get info from token
		----- parseClaims(accessToken)


- JwtTokenFilter -> extends OncePerRequestFilter:

	+ inject JwtTokenUtil

	+ override method: 
		------ doFilterInternal(request, response, filterchain): - check given token is not empty or bearer token
											   - get access token
											   - validate token (use method in jwtTokenUtil)
											   - getUserDetails(String accessToken)
											   - set authentication for current user, add it to Spring security context


- ApplicationSecurityConfig -> extends WebSecurityConfigurerAdapter: @EnableWebSecurity

	+ inject jwtTokenFilter, userService

	+ override 2 config methods: ------- configure (HttpSecurity http) -> manage http request, allow permission for each one
					     ------- configure (AuthenticationManagerBuilder auth) -> provide UserService for Spring Security

	+ override method: AuthenticationManager authenticationManagerBean() -> get authentication bean 


- User -> implement UserDetails:
	+ override methods -> return true / null;




--------------- Authorization ----------------

-User: 
	+ modify method getAuthorities(): set a List<SimpleGrantedAuthority> from user roles and return it

- Role:
	+ @ManyToMany relationship to User
	+ role name: follow a convention: [ ROLE_yourCustomRoleHere ]

- JwtTokenUtil: 
	+ generateAccessToken(User user): add more role claim to token 

- JwtTokenFilter:
	+ getUserDetails(String accessToken): set role to user that we get from token
	+ setAuthenticationContext(accessToken, request): set user authorities to authentication

- ApplicationSecurityConfig:
	+ add more @EnableGlobalMethodSecurity (jsr250Enabled = true)

- ProductController (API): 
	+ add @RolesAllowed({suitable_role_here}) to each api


